// Establish version and status ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name
apply plugin: 'java'
sourceCompatibility = 1.7

buildscript {
    repositories {
      mavenCentral() 
      maven {
         url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/'
      }
      maven {
         url 'https://maven.sencha.com/repo/support-commercial-release'
      }
    }
    dependencies { 
      classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.3+'
    }
}

// Establish extended properties for all projects
ext {
   gwtVer = "2.5.1"
   gxtVersion = "3.0.6"
   log4jVersion = "1.2.14"
   jUnitVersion = "4.11"
   remoteUri = ""
   remoteRef = ""
   subtreePrefix = ""
}

dependencies {
   compile project(':de')
   compile project(':belphegor')
}

// Set dependencies for all sub projects
subprojects {
   apply plugin: 'java'

   repositories {
      mavenLocal()
      mavenCentral()
   }

   group = 'org.iplantc.de'

   sourceCompatibility = 1.7

   jar {
      from sourceSets.main.allJava
   }
         
   // Exclude all GwtTests from normal java compiles
   test {
        exclude '**/GwtTest**'
        // Disable the test report for the individual test task
        reports.html.enabled = false
   }
   sourceSets.main.resources.srcDir 'src/main/java'
}

task testReport(type: TestReport) {
    group "Verification"
    description "Aggregates all sub-project jUnit tests reports"
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}


// Configure individual subprojects
project(':de') {
   apply plugin: 'war'
   apply plugin: 'gwt'
   apply plugin: 'jetty'

   dependencies {
      compile "log4j:log4j:$log4jVersion"
      testCompile "junit:junit:$jUnitVersion"
      compile "com.sencha.gxt:gxt:$gxtVersion"
      compile project(':ui-commons-module'), 
              project(':ui-applications-module'),
              project(':ui-apps-widgets-module'), 
              project(':ui-pipelines-module'),
              project(':ui-apps-integration'), 
              project(':ui-resources-module'),
              project(':confluence-client'),
              project(':de-common-module')
   }

   gwt {
      gwtVersion="$gwtVer"
      modules 'org.iplantc.de.discoveryenvironment'
      devModules 'org.iplantc.de.discoveryenvironmentDev'
      src += files(project(':ui-commons-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-commons-module').sourceSets.main.output.resourcesDir)
      src += files(project(':ui-applications-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-applications-module').sourceSets.main.output.resourcesDir)
      src += files(project(':ui-apps-widgets-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-apps-widgets-module').sourceSets.main.output.resourcesDir)
      src += files(project(':ui-apps-integration').sourceSets.main.allJava.srcDirs) + files(project(':ui-apps-integration').sourceSets.main.output.resourcesDir)
      src += files(project(':ui-resources-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-resources-module').sourceSets.main.output.resourcesDir)
      src += files(project(':de-common-module').sourceSets.main.allJava.srcDirs) + files(project(':de-common-module').sourceSets.main.output.resourcesDir)
      src += files(project(':ui-pipelines-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-pipelines-module').sourceSets.main.output.resourcesDir)
      src += files(project(':confluence-client').sourceSets.main.allJava.srcDirs) + files(project(':confluence-client').sourceSets.main.output.resourcesDir)

      superDev { noPrecompile=true }

      maxHeapSize = '1024M'
   }

   task deJetty(type: JettyRunWar) {
      group 'Web application'
      description 'Runs Jetty with an exploded draft war'
      //port = 8888
      dependsOn draftWar
      dependsOn.remove('war')
      webApp=draftWar.archivePath
   }

   
   task createDraftWar(type: Copy) {
      dependsOn draftWar
      into 'build/libs/draftWar'
      from('build/libs') {
         include '**/*draft*.war'
      }
      rename '.*draft.*.war', project.name + '.war'
   }

   draftWar {
      manifest { 
         attributes "Jenkins-Build-Version": "${BUILD_TAG}",
                    "Jenkins-Build-ID": "${BUILD_ID}", 
                    "Jenkins-Build-Number": "${BUILD_NUMBER}",
                    "Git-Branch": "${GIT_BRANCH}",
                    "Git-Commit": "${GIT_COMMIT}" 
      }
   }
   clean {
      delete "./war"
      delete "./bin"
   }

}

project(':belphegor') {
    apply plugin: 'war'
    apply plugin: 'gwt'
    apply plugin: 'jetty'

    dependencies {
        compile "log4j:log4j:$log4jVersion"
        testCompile "junit:junit:$jUnitVersion"
        compile "com.sencha.gxt:gxt:$gxtVersion"
        compile project(':ui-commons-module'),
                project(':ui-applications-module'),
                project(':ui-resources-module'),
                project(':confluence-client'),
                project(':de-common-module')
    }

    gwt {
        gwtVersion="$gwtVer"
        modules 'org.iplantc.admin.belphegor.belphegor'
        devModules 'org.iplantc.admin.belphegor.belphegorDev'
        src += files(project(':ui-resources-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-resources-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-commons-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-commons-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-applications-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-applications-module').sourceSets.main.output.resourcesDir)
        src += files(project(':de-common-module').sourceSets.main.allJava.srcDirs) + files(project(':de-common-module').sourceSets.main.output.resourcesDir)
        src += files(project(':confluence-client').sourceSets.main.allJava.srcDirs) + files(project(':confluence-client').sourceSets.main.output.resourcesDir)

        superDev { noPrecompile=true }

        maxHeapSize = '1024M'
    }

    task belphegorJetty(type: JettyRunWar) {
        group 'Web application'
        description 'Runs Jetty with an exploded draft war'
        //port = 8888
        dependsOn draftWar
        dependsOn.remove('war')
        webApp=draftWar.archivePath
    }

   task createDraftWar(type: Copy) {
      dependsOn draftWar
      into 'build/libs/draftWar'
      from('build/libs') {
         include '**/*draft*.war'
      }
      rename '.*draft.*.war', project.name + '.war'
   }

   draftWar {
      manifest { 
         attributes "Jenkins-Build-Version": "\${BUILD_TAG}",
                    "Jenkins-Build-ID": "\${BUILD_ID}", 
                    "Jenkins-Build-Number": "\${BUILD_NUMBER}",
                    "Git-Branch": "\${GIT_BRANCH}",
                    "Git-Commit": "\${GIT_COMMIT}" 
      }
   }

    clean {
        delete "./war"
        delete "./bin"
    }

}

project(':confluence-client') {
   apply plugin: 'eclipse'
   /* The following configurations and sourceSets declarations are necessary
    *  to mimic the 'provided' scope of maven builds
    */
   configurations {
      provided
      compile.extendsFrom provided
                runtime.exclude module: 'javaee-api'
                runtime.exclude module: 'javaee-web-api'
   }
   sourceSets {
      main { compileClasspath += configurations.provided }
   }
   
   dependencies {
      provided 'javax:javaee-web-api:6.0'
      compile "log4j:log4j:$log4jVersion"
      compile 'org.swift.common:cli:2.4.0'
      compile 'org.swift.common:cli-soap:2.4.0'
      compile 'org.swift.confluence:confluence-cli:2.4.0'
      compile 'org.swift.confluence:confluence-soap:4.0.0'
      compile 'com.martiansoftware:jsap:2.1'
      compile 'org.apache.axis:axis:1.4'
      compile project(':clavin-java')
      compile project(':de-common-module')
   }
} 
project(':ui-apps-integration') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }
   
   dependencies {
      compile project(':ui-apps-widgets-module')

      testCompile 'com.google.gwt.gwtmockito:gwtmockito:1.1.2'
      testCompile project(':de-common-module').sourceSets.test.output
   }
}
project(':ui-apps-widgets-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }
   
   dependencies {
      compile project(':ui-commons-module'), 
              project(':ui-applications-module')

      testCompile 'com.google.gwt.gwtmockito:gwtmockito:1.1.2'
      testCompile project(':de-common-module').sourceSets.test.output
   }
} 
project(':ui-disk-resource-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }
   
   dependencies {
      compile project(':ui-commons-module')

      testCompile 'com.google.gwt.gwtmockito:gwtmockito:1.1.2'
      testCompile project(':de-common-module').sourceSets.test.output
   }
} 
project(':ui-pipelines-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }

   dependencies {
      compile project(':ui-commons-module'), 
              project(':ui-pipeline-builder-module')
   }
} 
project(':ui-pipeline-builder-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }

   dependencies {
      compile project(':ui-applications-module')
   }
} 
project(':ui-applications-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }

   dependencies {
      compile project(':ui-disk-resource-module')
   }
} 
project(':ui-commons-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }

   dependencies {
      compile 'com.google.gwt.inject:gin:2.0.0'
      compile 'com.google.guava:guava-gwt:13.0.1'
      compile 'com.google.code.findbugs:jsr305:1.3.9'
      compile project(':ui-resources-module'), 
              project(':de-common-module')

      testCompile 'com.google.gwt.gwtmockito:gwtmockito:1.1.2'
      testCompile project(':de-common-module').sourceSets.test.output
   }
} 
project(':de-common-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }

   dependencies {
      compile 'com.google.gwt.inject:gin:2.0.0'
      compile 'org.apache.httpcomponents:httpclient:4.2.1'
      compile 'org.apache.httpcomponents:httpmime:4.2.1'
      compile ('org.jasig.cas.client:cas-client-core:3.2.0') {
          exclude group: 'javax.servlet', module: 'servlet-api'
      }
      compile 'org.antlr:stringtemplate:4.0.2'
      compile "log4j:log4j:$log4jVersion"
      compile 'org.springframework.security:spring-security-cas:3.1.4.RELEASE'
      compile 'org.springframework.security:spring-security-web:3.1.2.RELEASE'
      compile 'org.springframework.security:spring-security-core:3.1.2.RELEASE'
      compile 'org.springframework.security:spring-security-config:3.1.2.RELEASE'

      compile 'commons-io:commons-io:2.0.1'
      compile 'net.sf.json-lib:json-lib:2.4:jdk15'
      compile 'commons-fileupload:commons-fileupload:1.2.1'
      compile "com.sencha.gxt:gxt:$gxtVersion"
      compile project(':clavin-java')
      compile project(':ui-resources-module')

      testCompile 'com.google.gwt.gwtmockito:gwtmockito:1.1.2'
   }
} 
project(':ui-resources-module') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }

   dependencies {
      compile "com.sencha.gxt:gxt:$gxtVersion"
   }
}
project(':clavin-java') {
   apply plugin: 'gwt-base'
   gwt { gwtVersion="$gwtVer" }
   
   dependencies {
      compile 'com.netflix.curator:curator-framework:1.1.16'
      compile 'org.springframework:spring-web:3.0.7.RELEASE'
      compile 'org.springframework:spring-beans:3.0.7.RELEASE'

      testCompile 'com.netflix.curator:curator-test:1.1.16'
      testCompile "junit:junit:$jUnitVersion"
   }
}

apply from: file('iplant/eclipse.gradle')
apply from: file('iplant/webappBootstrap.gradle')

