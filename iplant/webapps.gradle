project(':de') {
    apply plugin: 'war'
    apply plugin: 'gwt'
    apply plugin: 'spring-boot'

    configurations {
        applet
        providedRuntime
    }

    dependencies {
        applet "org.irods.idrop:idrop-lite:2.0.1-SNAPSHOT@jar"

        compile("org.springframework.boot:spring-boot-starter-web")
        providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
        providedRuntime("org.apache.tomcat.embed:tomcat-embed-jasper")

        compile("org.springframework.boot:spring-boot-starter-security")
        compile("org.springframework.security:spring-security-cas")
        compile("javax.servlet:jstl:1.2")
        compile("org.hibernate:hibernate-validator:5.0.3.Final")
        gwt("org.hibernate:hibernate-validator:5.0.3.Final")


        gwt "com.sencha.gxt:gxt:$gxtVersion"
        gwt "com.google.gwt.inject:gin:$gwtGinVer"
        gwt "com.google.guava:guava-gwt:$guavaGwtVer"

        gwt project(':de-lib')

//        compile "com.sencha.gxt:gxt:$gxtVersion"
//        compile "com.google.gwt.inject:gin:$gwtGinVer"
//        compile "com.google.guava:guava-gwt:$guavaGwtVer"

//        compile "org.slf4j:slf4j-api:$slf4jVersion"
//        compile "ch.qos.logback:logback-core:$logbackVersion"
//        compile "ch.qos.logback:logback-classic:$logbackVersion"

//        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
//        compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"

        compile project(':de-lib')

        testCompile "com.google.gwt.gwtmockito:gwtmockito:$gwtMockitoVer"
    }

    gwt {
        logLevel = 'INFO'
        gwtVersion = "$gwtVer"
        modules 'org.iplantc.de.admin.belphegor'
//        modules = ['org.iplantc.de.discoveryenvironment',
//                   'org.iplantc.de.admin.belphegor']
        devModules = ['org.iplantc.de.discoveryenvironmentDev',
                      'org.iplantc.de.admin.belphegorDev']

        src += files(project(':de-lib').sourceSets.main.allJava.srcDirs) + files(project(':de-lib').sourceSets.main.output.resourcesDir)

        superDev { noPrecompile = true }
        maxHeapSize = '1024M'
        compiler {
//            enableClosureCompiler = true;
            disableClassMetadata = true;
            disableCastChecking = true;
            compileReport = true;
            // Enable fragment merging
            fragmentCount = 1;
            strict = true
        }

    }

    war {
        // Put idrop lite jar into war
        from(configurations.applet) {
            into 'applets'
        }
    }

    draftWar {
        // Put idrop lite jar into war
        from(configurations.applet) {
            into 'applets'
        }
    }

    // Convenience task for launching sdm
    task sdm(dependsOn: 'gwtSuperDev') {
        description 'Short hand task for launching GWT Super Dev Mode'
    }

    war {
        manifest {
            attributes "Jenkins-Build-Version": "${BUILD_TAG}",
                    "Jenkins-Build-ID": "${BUILD_ID}",
                    "Jenkins-Build-Number": "${BUILD_NUMBER}",
                    "Git-Branch": "${GIT_BRANCH}",
                    "Git-Commit": "${GIT_COMMIT}"
        }
    }

    draftWar {
        manifest {
            attributes "Jenkins-Build-Version": "${BUILD_TAG}",
                    "Jenkins-Build-ID": "${BUILD_ID}",
                    "Jenkins-Build-Number": "${BUILD_NUMBER}",
                    "Git-Branch": "${GIT_BRANCH}",
                    "Git-Commit": "${GIT_COMMIT}"
        }
    }

    task createProdWar(type: Copy) {
        dependsOn war
        into 'build/libs/wars'
        from('build/libs') {
            exclude '**/*draft*.war'
        }
        rename project.tasks.war.archiveName, project.name + '.war'
    }

    clean {
        delete "./war"
        delete "./bin"
    }
}


