#!/bin/sh

set -e

function perl_substitution () {
    local new_version="$1"
    cat <<EOF
    s{
        (\[org\.iplantc[^"]*)   # capture the group and artifact IDs
        "[^"]*"                 # ignore the version and surrounding quotes
    }
    {\1"${new_version}"}gxms
EOF
}

function project_substitution () {
	local new_version="$1"
	cat <<EOF
	s{
		(\(defproject[^"]*)
		"[^"]*"
	}
	{\1"${new_version}"}gxms
EOF
}

if [ $# -eq 0 ]; then
  echo "USAGE: ./set-versions.sh <version>"
  exit 1
fi

echo "NOTE: This script requires the lein-set-version plugin for Leiningen."
echo "I don't know if you have it already, but if you need it go to: "
echo "https://github.com/pallet/lein-set-version"

for project in $(find . -name project.clj -exec dirname '{}' \;); do
  pushd $project 2>&1 > /dev/null

  cljproj=$(basename $project)

  if [ "$cljproj" == "Donkey" ]; then
    echo ">>> $cljproj: Setting version to $1-SNAPSHOT"
	perl -pi -e "$(project_substitution $1-SNAPSHOT)" project.clj
  else
    echo ">>> $cljproj: Setting version to $1"
	perl -pi -e "$(project_substitution $1)" project.clj
  fi

  echo ">>> $cljproj: Setting versions of all iPlant deps to $1"
  #sed -i '' "s/\(\[org\.iplantc[^\"]*\"\)[^\"]*\"/\1$1\"/g" project.clj
  perl -pi -e "$(perl_substitution $1)" project.clj
  echo " "

  popd 2>&1 > /dev/null
done

for version in $(find . -name version); do
  echo ">>> Setting $version to $1"
  echo "$1" > $version
  echo " "
done
