{"lein-iplant-cmdtar"
 {:type     :lein-plugin
  :path     "lein-plugins/lein-iplant-cmdtar"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "lein-iplant-rpm"
 {:type     :lein-plugin
  :path     "lein-plugins/lein-iplant-rpm"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "clj-cas"
 {:type     :library
  :type-num 7
  :path     "libs/clj-cas"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "clj-icat-direct"
 {:type     :library
  :type-num 9
  :path     "libs/clj-icat-direct"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "clj-jargon"
 {:type     :library
  :type-num 8
  :path     "libs/clj-jargon"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "de-authn"
 {:type     :library
  :type-num 2
  :path     "libs/de-authn"
  :build    :mvn
  :install  :mvn
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :java
  :archive? false}

 "de-base-services-pom"
 {:type     :library
  :type-num 0
  :path     "libs/de-base-services-pom"
  :build    :mvn
  :install  :mvn
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :java
  :archive? false}

 "de-persistence"
 {:type     :library
  :type-num 3
  :path     "libs/de-persistence"
  :build    :mvn
  :install  :mvn
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :java
  :archive? false}

 "heuristomancer"
 {:type     :library
  :type-num 11
  :path     "libs/heuristomancer"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "hibernatetoolkit"
 {:type     :library
  :type-num 1
  :path     "libs/hibernatetoolkit"
  :build    :mvn
  :install  :mvn
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :java
  :archive? false}

 "iplant-clojure-commons"
 {:type     :library
  :type-num 5
  :path     "libs/iplant-clojure-commons"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "kameleon"
 {:type     :library
  :type-num 6
  :path     "libs/kameleon"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "mescal"
 {:type     :library
  :type-num 10
  :path     "libs/mescal"
  :build    :lein
  :install  :lein
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :clojure
  :archive? false}

 "metadactyl"
 {:type     :library
  :type-num 4
  :path     "libs/metadactyl"
  :build    :mvn
  :install  :mvn
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? true
  :language :java
  :archive? false}

 "clockwork"
 {:type     :service
  :path     "services/clockwork"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "Conrad"
 {:type     :service
  :path     "services/Conrad"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "dewey"
 {:type     :service
  :path     "services/dewey"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "Donkey"
 {:type     :service
  :path     "services/Donkey"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "Infosquito"
 {:type     :service
  :path     "services/Infosquito"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "iplant-email"
 {:type     :service
  :path     "services/iplant-email"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "JEX"
 {:type     :service
  :path     "services/JEX"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "kifshare"
 {:type     :service
  :path     "services/kifshare"
  :build    :kifshare
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "metadactyl-clj"
 {:type     :service
  :path     "services/metadactyl-clj"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "NotificationAgent"
 {:type     :service
  :path     "services/NotificationAgent"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "OSM"
 {:type     :service
  :path     "services/OSM"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "Panopticon"
 {:type     :tool
  :path     "services/Panopticon"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "clavin"
 {:type     :tool
  :path     "tools/clavin"
  :build    :cmdtar
  :rpm?     true
  :tarball? true
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "facepalm"
 {:type     :tool
  :path     "tools/facepalm"
  :build    :cmdtar
  :rpm?     true
  :tarball? true
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "filetool"
 {:type     :tool
  :path     "tools/filetool"
  :build    :lein
  :rpm?     true
  :tarball? false
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "proboscis"
 {:type     :tool
  :path     "tools/proboscis"
  :build    :cmdtar
  :rpm?     false
  :tarball? true
  :uberjar? true
  :install? false
  :language :clojure
  :archive? true}

 "de-database-schema"
 {:type     :database
  :path     "databases/de-database-schema"
  :build    :shell
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? false
  :language :sql
  :archive? true}

 "notification-db"
 {:type     :database
  :path     "databases/notification-db"
  :build    :shell
  :rpm?     false
  :tarball? false
  :uberjar? false
  :install? false
  :language :sql
  :archive? true}}
